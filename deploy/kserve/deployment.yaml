apiVersion: apps/v1
kind: Deployment
metadata:
  name: semantic-router-kserve
  labels:
    app: semantic-router
    component: gateway
  annotations:
    opendatahub.io/dashboard: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: semantic-router
      component: gateway
  template:
    metadata:
      labels:
        app: semantic-router
        component: gateway
      annotations:
        sidecar.istio.io/inject: "false"  # Disable Istio injection to avoid conflicts with Envoy
    spec:
      serviceAccountName: semantic-router  # Create ServiceAccount if RBAC required
      # OpenShift security context - let OpenShift assign UID/GID
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault

      initContainers:
      # Init container to download models from HuggingFace
      - name: model-downloader
        image: python:3.11-slim
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        command: ["/bin/bash", "-c"]
        args:
        - |
          set -e
          echo "Installing Hugging Face CLI..."
          pip install --no-cache-dir huggingface_hub[cli]

          echo "Downloading models to persistent volume..."
          cd /app/models

          # Download category classifier model
          if [ ! -d "category_classifier_modernbert-base_model" ] || [ -z "$(find category_classifier_modernbert-base_model -name '*.safetensors' -o -name '*.bin' -o -name 'pytorch_model.*' 2>/dev/null)" ]; then
            echo "Downloading category classifier model..."
            huggingface-cli download LLM-Semantic-Router/category_classifier_modernbert-base_model \
              --local-dir category_classifier_modernbert-base_model \
              --cache-dir /app/cache/hf
          else
            echo "Category classifier model already exists, skipping..."
          fi

          # Download PII classifier model
          if [ ! -d "pii_classifier_modernbert-base_model" ] || [ -z "$(find pii_classifier_modernbert-base_model -name '*.safetensors' -o -name '*.bin' -o -name 'pytorch_model.*' 2>/dev/null)" ]; then
            echo "Downloading PII classifier model..."
            huggingface-cli download LLM-Semantic-Router/pii_classifier_modernbert-base_model \
              --local-dir pii_classifier_modernbert-base_model \
              --cache-dir /app/cache/hf
          else
            echo "PII classifier model already exists, skipping..."
          fi

          # Download jailbreak classifier model
          if [ ! -d "jailbreak_classifier_modernbert-base_model" ] || [ -z "$(find jailbreak_classifier_modernbert-base_model -name '*.safetensors' -o -name '*.bin' -o -name 'pytorch_model.*' 2>/dev/null)" ]; then
            echo "Downloading jailbreak classifier model..."
            huggingface-cli download LLM-Semantic-Router/jailbreak_classifier_modernbert-base_model \
              --local-dir jailbreak_classifier_modernbert-base_model \
              --cache-dir /app/cache/hf
          else
            echo "Jailbreak classifier model already exists, skipping..."
          fi

          # Download PII token classifier model
          if [ ! -d "pii_classifier_modernbert-base_presidio_token_model" ] || [ -z "$(find pii_classifier_modernbert-base_presidio_token_model -name '*.safetensors' -o -name '*.bin' -o -name 'pytorch_model.*' 2>/dev/null)" ]; then
            echo "Downloading PII token classifier model..."
            huggingface-cli download LLM-Semantic-Router/pii_classifier_modernbert-base_presidio_token_model \
              --local-dir pii_classifier_modernbert-base_presidio_token_model \
              --cache-dir /app/cache/hf
          else
            echo "PII token classifier model already exists, skipping..."
          fi

          # Download embedding model for semantic cache (BERT)
          if [ ! -d "all-MiniLM-L12-v2" ]; then
            echo "Downloading BERT embedding model for semantic cache..."
            huggingface-cli download sentence-transformers/all-MiniLM-L12-v2 \
              --local-dir all-MiniLM-L12-v2 \
              --cache-dir /app/cache/hf
          else
            echo "BERT embedding model already exists, skipping..."
          fi

          echo "All models downloaded successfully!"
          ls -la /app/models/

          echo "Setting proper permissions for models directory..."
          find /app/models -type f -exec chmod 644 {} \; || echo "Warning: Could not change model file permissions"
          find /app/models -type d -exec chmod 755 {} \; || echo "Warning: Could not change model directory permissions"

          echo "Creating cache directories..."
          mkdir -p /app/cache/hf /app/cache/transformers /app/cache/sentence_transformers /app/cache/xdg /app/cache/bert
          chmod -R 777 /app/cache/ || echo "Warning: Could not change cache directory permissions"

          echo "Model download complete."
        env:
        - name: HF_HUB_CACHE
          value: /app/cache/hf
        - name: HF_HOME
          value: /app/cache/hf
        - name: TRANSFORMERS_CACHE
          value: /app/cache/transformers
        - name: PIP_CACHE_DIR
          value: /tmp/pip_cache
        - name: PYTHONUSERBASE
          value: /tmp/python_user
        - name: PATH
          value: /tmp/python_user/bin:/usr/local/bin:/usr/bin:/bin
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: models-volume
          mountPath: /app/models
        - name: cache-volume
          mountPath: /app/cache

      containers:
      # Semantic Router container
      - name: semantic-router
        image: ghcr.io/vllm-project/semantic-router/extproc:latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        ports:
        - containerPort: 50051
          name: grpc
          protocol: TCP
        - containerPort: 9190
          name: metrics
          protocol: TCP
        - containerPort: 8080
          name: classify-api
          protocol: TCP
        env:
        - name: LD_LIBRARY_PATH
          value: "/app/lib"
        - name: HF_HOME
          value: "/app/cache/hf"
        - name: TRANSFORMERS_CACHE
          value: "/app/cache/transformers"
        - name: SENTENCE_TRANSFORMERS_HOME
          value: "/app/cache/sentence_transformers"
        - name: XDG_CACHE_HOME
          value: "/app/cache/xdg"
        - name: HOME
          value: "/tmp/home"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: models-volume
          mountPath: /app/models
        - name: cache-volume
          mountPath: /app/cache
        livenessProbe:
          tcpSocket:
            port: 50051
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 50051
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        resources:
          requests:
            memory: "3Gi"
            cpu: "1"
          limits:
            memory: "6Gi"
            cpu: "2"

      # Envoy proxy container - routes to KServe endpoints
      - name: envoy-proxy
        image: envoyproxy/envoy:v1.35.3
        ports:
        - containerPort: 8801
          name: envoy-http
          protocol: TCP
        - containerPort: 19000
          name: envoy-admin
          protocol: TCP
        command: ["/usr/local/bin/envoy"]
        args:
        - "-c"
        - "/etc/envoy/envoy.yaml"
        - "--component-log-level"
        - "ext_proc:info,router:info,http:info"
        env:
        - name: loglevel
          value: "info"
        volumeMounts:
        - name: envoy-config-volume
          mountPath: /etc/envoy
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          tcpSocket:
            port: 8801
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 8801
          initialDelaySeconds: 10
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

      volumes:
      - name: config-volume
        configMap:
          name: semantic-router-kserve-config
      - name: envoy-config-volume
        configMap:
          name: semantic-router-envoy-kserve-config
      - name: models-volume
        persistentVolumeClaim:
          claimName: semantic-router-models
      - name: cache-volume
        persistentVolumeClaim:
          claimName: semantic-router-cache
