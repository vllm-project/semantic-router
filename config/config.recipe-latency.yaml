# Recipe: Latency-Optimized Configuration
# Objective: Minimize response time and maximize throughput
# Trade-offs: May sacrifice accuracy, uses aggressive caching, minimal reasoning
# Use case: Real-time APIs, chatbots, interactive applications
#
# Key optimizations:
# - Reasoning disabled for all categories (fastest responses)
# - Aggressive semantic caching for instant cache hits
# - Very low classification thresholds for fast routing
# - Minimal tool selection
# - Relaxed security checks for speed
# - High concurrency and large batch sizes
# - Minimal observability overhead

bert_model:
  model_id: models/all-MiniLM-L12-v2
  threshold: 0.4  # Very low threshold for fast matching
  use_cpu: true

semantic_cache:
  enabled: true  # Enable aggressive caching for instant responses
  backend_type: "memory"
  similarity_threshold: 0.7  # Low threshold for maximum cache hits
  max_entries: 20000  # Very large cache
  ttl_seconds: 10800  # Long TTL (3 hours)
  eviction_policy: "lru"  # Keep frequently accessed items

tools:
  enabled: false  # Disable tools to minimize latency
  top_k: 1
  similarity_threshold: 0.5
  tools_db_path: "config/tools_db.json"
  fallback_to_empty: true

prompt_guard:
  enabled: false  # Disable for maximum speed

vllm_endpoints:
  - name: "endpoint1"
    address: "127.0.0.1"
    port: 8000
    weight: 1

model_config:
  "openai/gpt-oss-20b":
    reasoning_family: "gpt-oss"
    preferred_endpoints: ["endpoint1"]
    pii_policy:
      allow_by_default: true  # Allow all for speed; when true, all PII types are allowed
    pricing:
      currency: USD
      prompt_per_1m: 0.10
      completion_per_1m: 0.30

classifier:
  category_model:
    model_id: "models/category_classifier_modernbert-base_model"
    use_modernbert: true
    threshold: 0.4  # Very low threshold for fast classification
    use_cpu: true
    category_mapping_path: "models/category_classifier_modernbert-base_model/category_mapping.json"
  pii_model:
    model_id: "models/pii_classifier_modernbert-base_presidio_token_model"
    use_modernbert: true
    threshold: 0.9  # Very high threshold (minimal PII detection for speed)
    use_cpu: true
    pii_mapping_path: "models/pii_classifier_modernbert-base_presidio_token_model/pii_type_mapping.json"

categories:
  - name: business
    system_prompt: "Provide concise business advice."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.7
        use_reasoning: false  # No reasoning for speed
  - name: law
    system_prompt: "Provide legal information."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.5
        use_reasoning: false
  - name: psychology
    system_prompt: "Provide psychology insights."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.6
        use_reasoning: false
  - name: biology
    system_prompt: "Explain biology concepts."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.8
        use_reasoning: false
  - name: chemistry
    system_prompt: "Explain chemistry concepts."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.6
        use_reasoning: false
  - name: history
    system_prompt: "Provide historical context."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.7
        use_reasoning: false
  - name: other
    system_prompt: "Provide helpful responses."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.7
        use_reasoning: false
  - name: health
    system_prompt: "Provide health information."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.5
        use_reasoning: false
  - name: economics
    system_prompt: "Provide economic insights."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.9
        use_reasoning: false
  - name: math
    system_prompt: "Provide math solutions."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 1.0
        use_reasoning: false  # Even math: no reasoning for speed
  - name: physics
    system_prompt: "Explain physics concepts."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.7
        use_reasoning: false
  - name: computer science
    system_prompt: "Provide code solutions."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.6
        use_reasoning: false
  - name: philosophy
    system_prompt: "Provide philosophical perspectives."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.5
        use_reasoning: false
  - name: engineering
    system_prompt: "Provide engineering solutions."
    model_scores:
      - model: openai/gpt-oss-20b
        score: 0.7
        use_reasoning: false

default_model: openai/gpt-oss-20b

reasoning_families:
  deepseek:
    type: "chat_template_kwargs"
    parameter: "thinking"
  qwen3:
    type: "chat_template_kwargs"
    parameter: "enable_thinking"
  gpt-oss:
    type: "reasoning_effort"
    parameter: "reasoning_effort"
  gpt:
    type: "reasoning_effort"
    parameter: "reasoning_effort"

default_reasoning_effort: low  # Minimal effort if reasoning is ever used

api:
  batch_classification:
    max_batch_size: 200  # Very large batches for throughput
    concurrency_threshold: 5
    max_concurrency: 32  # Maximum concurrency for speed
    metrics:
      enabled: true
      detailed_goroutine_tracking: false  # Disable for performance
      high_resolution_timing: false
      sample_rate: 0.05  # Sample only 5% to minimize overhead
      duration_buckets: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1]
      size_buckets: [1, 10, 50, 100, 200]

observability:
  tracing:
    enabled: false  # Disable tracing for maximum performance
    provider: "opentelemetry"
    exporter:
      type: "stdout"
      endpoint: ""
      insecure: true
    sampling:
      type: "probabilistic"
      rate: 0.01  # Sample only 1% if enabled
    resource:
      service_name: "vllm-semantic-router-latency"
      service_version: "v0.1.0"
      deployment_environment: "production"
