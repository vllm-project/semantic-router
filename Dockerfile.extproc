# Build the Rust library using cargo-chef for better caching
FROM rust:1.85 as chef
RUN cargo install cargo-chef
WORKDIR /app

FROM chef as planner
COPY candle-binding/Cargo.toml candle-binding/Cargo.lock candle-binding/
COPY candle-binding/src candle-binding/src
RUN cd candle-binding && cargo chef prepare --recipe-path recipe.json

FROM chef as rust-builder
# Build arg for cargo build parallelism
ARG CARGO_BUILD_JOBS=4

# Install make and other build dependencies
RUN apt-get update && apt-get install -y \
    make \
    build-essential \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Set cargo environment for parallel builds and optimization
ENV CARGO_BUILD_JOBS=${CARGO_BUILD_JOBS}
ENV CARGO_INCREMENTAL=0
ENV RUSTFLAGS="-C opt-level=3 -C codegen-units=1"

WORKDIR /app

# Copy recipe and build dependencies (this layer will be cached)
COPY --from=planner /app/candle-binding/recipe.json candle-binding/recipe.json
RUN cd candle-binding && cargo chef cook --release --recipe-path recipe.json

# Set proper target for cross-compilation if needed
ARG TARGETPLATFORM
RUN case "${TARGETPLATFORM}" in \
    "linux/arm64") echo "aarch64-unknown-linux-gnu" > /tmp/rust-target ;; \
    *) echo "x86_64-unknown-linux-gnu" > /tmp/rust-target ;; \
    esac

# Copy source code and build application
COPY tools/make/ tools/make/
COPY Makefile ./
COPY candle-binding/ candle-binding/

# Use Makefile to build the Rust library
RUN make rust

# Build the Go application
FROM golang:1.24 as go-builder

WORKDIR /app

# Copy Go module files first for better layer caching
RUN mkdir -p src/semantic-router candle-binding
COPY src/semantic-router/go.mod src/semantic-router/go.sum src/semantic-router/
COPY candle-binding/go.mod candle-binding/semantic-router.go candle-binding/

# Download Go dependencies (cached layer)
RUN cd src/semantic-router && go mod download

# Copy semantic-router source code
COPY src/semantic-router/ src/semantic-router/

# Copy the built Rust library from rust-builder
COPY --from=rust-builder /app/candle-binding/target/release/libcandle_semantic_router.so /app/candle-binding/target/release/

# Set environment variables for CGO to find the library
ENV CGO_ENABLED=1
ENV LD_LIBRARY_PATH=/app/candle-binding/target/release
ENV GOOS=linux

# Build the router binary with optimizations
RUN mkdir -p bin && cd src/semantic-router && \
    go build -ldflags="-w -s" -o ../../bin/router cmd/main.go

# Final stage: copy the binary and the shared library
FROM quay.io/centos/centos:stream9

WORKDIR /app

COPY --from=go-builder /app/bin/router /app/extproc-server
COPY --from=go-builder /app/candle-binding/target/release/libcandle_semantic_router.so /app/lib/
COPY config/config.yaml /app/config/

ENV LD_LIBRARY_PATH=/app/lib

EXPOSE 50051

# Copy entrypoint to allow switching config via env var CONFIG_FILE
COPY scripts/entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

ENTRYPOINT ["/app/entrypoint.sh"]
