name: Kind Cluster Integration Test

on:
  workflow_call:
    inputs:
      kind_version:
        description: "Kind version to use"
        required: false
        type: string
        default: "v0.20.0"
      kustomize_version:
        description: "Kustomize version to use"
        required: false
        type: string
        default: "v5.7.1"

jobs:
  kind-integration-test:
    name: kind Cluster Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Increased to account for model downloads

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free up disk space before build
        run: |
          echo "=== Initial disk usage ==="
          df -h
          echo ""
          echo "=== Cleaning up system ==="
          # Remove unnecessary packages and caches
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*

          # Clean Docker system
          docker system prune -af --volumes

          # Remove large unnecessary files/directories
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL

          echo ""
          echo "=== Disk usage after cleanup ==="
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate kind configuration for CI
        run: |
          echo "Creating CI-optimized kind configuration..."
          # Use the existing kind configuration template and modify it for CI
          mkdir -p tools/kind

          # Create a CI-specific kind config based on the template
          cat > tools/kind/kind-config.yaml << 'EOF'
          # kind cluster configuration for CI testing
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          name: semantic-router-cluster
          nodes:
            - role: control-plane
              # Optimized for CI environment with limited resources
              extraPortMappings:
                - containerPort: 30080
                  hostPort: 30080
                  protocol: TCP
              kubeadmConfigPatches:
                - |
                  kind: InitConfiguration
                  nodeRegistration:
                    kubeletExtraArgs:
                      # Reduced resource limits for CI
                      system-reserved: memory=512Mi,cpu=250m
                      kube-reserved: memory=512Mi,cpu=250m
                      eviction-hard: memory.available<512Mi,nodefs.available<10%
                - |
                  kind: ClusterConfiguration
                  apiServer:
                    extraArgs:
                      max-requests-inflight: "200"
                      max-mutating-requests-inflight: "100"
                  etcd:
                    local:
                      extraArgs:
                        quota-backend-bytes: "4294967296" # 4GB (reduced from 8GB)
          EOF
          echo "Generated CI-optimized kind-config.yaml:"
          cat tools/kind/kind-config.yaml

      - name: Create kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          version: ${{ inputs.kind_version }}
          config: tools/kind/kind-config.yaml
          cluster_name: semantic-router-cluster
          wait: 120s

      - name: Build semantic-router image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.extproc
          tags: ghcr.io/vllm-project/semantic-router/extproc:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Load image into kind cluster
        run: |
          echo "Loading image into kind cluster..."
          kind load docker-image ghcr.io/vllm-project/semantic-router/extproc:test --name semantic-router-cluster
          echo "Image loaded successfully!"

      - name: Clean up after image build
        run: |
          echo "=== Cleaning up Docker build artifacts ==="
          # Remove build cache and unused images
          docker builder prune -af
          docker image prune -af

          # Keep only the images we need
          docker images

          echo ""
          echo "=== Disk usage after build cleanup ==="
          df -h

      - name: Verify cluster
        run: |
          echo "=== Verifying kind cluster ==="
          kubectl cluster-info
          kubectl get nodes -o wide
          kubectl version

          # Verify cluster is ready
          kubectl wait --for=condition=Ready nodes --all --timeout=120s

          # Check available resources
          echo "=== Node resources ==="
          kubectl describe nodes

      - name: Install Kustomize
        run: |
          echo "Installing Kustomize ${{ inputs.kustomize_version }}..."
          # Use the official installation script for better reliability
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          kustomize version

      - name: Prepare CI deployment
        run: |
          echo "Preparing CI deployment configuration..."

          # Create a temporary kustomization file for CI
          cd deploy/kubernetes

          # Backup original kustomization.yaml
          cp kustomization.yaml kustomization.yaml.backup

          # Create CI-specific kustomization with patches
          cat > kustomization.yaml << EOF
          apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization

          metadata:
            name: semantic-router

          resources:
          - namespace.yaml
          - pv-models.yaml
          - deployment.yaml
          - service.yaml

          # Generate ConfigMap
          configMapGenerator:
          - name: semantic-router-config
            files:
            - config.yaml
            - tools_db.json

          namespace: vllm-semantic-router-system

          # Use the test image
          images:
          - name: ghcr.io/vllm-project/semantic-router/extproc
            newTag: test

          # Patch for CI - adjust resources for model loading and set imagePullPolicy
          patches:
          - patch: |-
              - op: replace
                path: /spec/template/spec/containers/0/resources/requests/memory
                value: "2Gi"
              - op: replace
                path: /spec/template/spec/containers/0/resources/requests/cpu
                value: "500m"
              - op: replace
                path: /spec/template/spec/containers/0/resources/limits/memory
                value: "4Gi"
              - op: replace
                path: /spec/template/spec/containers/0/resources/limits/cpu
                value: "1"
              - op: add
                path: /spec/template/spec/containers/0/imagePullPolicy
                value: "IfNotPresent"
            target:
              kind: Deployment
              name: semantic-router
          EOF

          echo "=== Generated CI kustomization ==="
          cat kustomization.yaml

      - name: Pre-flight check for Hugging Face connectivity
        run: |
          echo "Testing Hugging Face Hub connectivity..."
          curl -I https://huggingface.co || {
            echo "⚠️  Warning: Cannot reach huggingface.co"
          }

          # Test one of the model repos
          curl -I https://huggingface.co/LLM-Semantic-Router/category_classifier_modernbert-base_model || {
            echo "⚠️  Warning: Cannot reach model repository"
          }

          echo "✓ Connectivity check completed"

      - name: Final disk cleanup before deployment
        run: |
          echo "=== Final cleanup before deployment ==="
          # Clean up any remaining build artifacts
          docker system prune -f

          # Clear system caches
          sudo sync
          echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null || true

          echo "=== Final disk usage ==="
          df -h

          echo "=== Available memory ==="
          free -h

      - name: Deploy to kind cluster
        run: |
          echo "Deploying semantic-router to kind cluster..."
          kustomize build deploy/kubernetes | kubectl apply -f -

          echo "Waiting for namespace to be active..."
          kubectl wait --for=jsonpath='{.status.phase}'=Active namespace/vllm-semantic-router-system --timeout=60s

          echo "Deployment initiated. Checking resources..."
          kubectl get all -n vllm-semantic-router-system

      - name: Wait for deployment readiness
        run: |
          echo "Waiting for deployment to be ready..."

          # Wait for PVC to be bound
          echo "Waiting for PVC to be bound..."
          kubectl wait --for=jsonpath='{.status.phase}'=Bound pvc/semantic-router-models -n vllm-semantic-router-system --timeout=120s || {
            echo "PVC binding timeout. Checking PVC status..."
            kubectl describe pvc -n vllm-semantic-router-system
            exit 1
          }

          # Wait for pods to be created
          echo "Waiting for pods to be created..."
          timeout 120 bash -c 'until kubectl get pods -n vllm-semantic-router-system | grep -q semantic-router; do echo "Waiting for pod creation..."; sleep 5; done'

          # Show pod status
          kubectl get pods -n vllm-semantic-router-system

          # Wait for init container to complete (model download)
          echo "Waiting for init container to complete (downloading models)..."
          kubectl wait --for=condition=Initialized pods -l app=semantic-router -n vllm-semantic-router-system --timeout=600s || {
            echo "❌ Init container did not complete in time. Showing logs..."
            kubectl logs -n vllm-semantic-router-system -l app=semantic-router -c model-downloader --tail=200 || true
            kubectl describe pods -n vllm-semantic-router-system -l app=semantic-router
            exit 1
          }

          # Wait for main container to be ready (increased timeout for model loading)
          echo "Waiting for main container to be ready..."
          kubectl wait --for=condition=Ready pods -l app=semantic-router -n vllm-semantic-router-system --timeout=600s || {
            echo "❌ Pod did not become ready in time. Showing status and logs..."
            kubectl describe pods -n vllm-semantic-router-system -l app=semantic-router
            kubectl logs -n vllm-semantic-router-system -l app=semantic-router --tail=200 || true
            exit 1
          }

          echo "✅ Deployment is ready!"

      - name: Verify deployment
        run: |
          echo "=== Verifying Deployment ==="

          # Check deployment status
          kubectl get deployment -n vllm-semantic-router-system semantic-router -o wide

          # Check pod status
          kubectl get pods -n vllm-semantic-router-system -o wide

          # Check services
          kubectl get svc -n vllm-semantic-router-system

          # Check configmaps
          kubectl get configmap -n vllm-semantic-router-system

          # Verify pod is running
          POD_STATUS=$(kubectl get pods -n vllm-semantic-router-system -l app=semantic-router -o jsonpath='{.items[0].status.phase}')
          if [ "$POD_STATUS" != "Running" ]; then
            echo "Error: Pod is not running. Status: $POD_STATUS"
            kubectl describe pods -n vllm-semantic-router-system -l app=semantic-router
            exit 1
          fi

          echo "✓ Pod is running"

          # Verify all containers are ready
          READY_CONTAINERS=$(kubectl get pods -n vllm-semantic-router-system -l app=semantic-router -o jsonpath='{.items[0].status.containerStatuses[0].ready}')
          if [ "$READY_CONTAINERS" != "true" ]; then
            echo "Error: Container is not ready"
            kubectl describe pods -n vllm-semantic-router-system -l app=semantic-router
            exit 1
          fi

          echo "✓ All containers are ready"

      - name: Test service connectivity
        run: |
          echo "=== Testing Service Connectivity ==="

          # Get pod name
          POD_NAME=$(kubectl get pods -n vllm-semantic-router-system -l app=semantic-router -o jsonpath='{.items[0].metadata.name}')
          echo "Pod name: $POD_NAME"

          # Test basic port connectivity
          echo "Testing ports..."
          kubectl exec -n vllm-semantic-router-system $POD_NAME -- timeout 5 nc -zv localhost 50051 || echo "gRPC port test failed"
          kubectl exec -n vllm-semantic-router-system $POD_NAME -- timeout 5 nc -zv localhost 9190 || echo "Metrics port test failed"
          kubectl exec -n vllm-semantic-router-system $POD_NAME -- timeout 5 nc -zv localhost 8080 || echo "API port test failed"

          echo "✓ Service connectivity tests completed"

      - name: Test API functionality
        run: |
          echo "=== Testing API Functionality ==="

          # Get pod name
          POD_NAME=$(kubectl get pods -n vllm-semantic-router-system -l app=semantic-router -o jsonpath='{.items[0].metadata.name}')
          echo "Pod name: $POD_NAME"

          # Wait for API to be ready
          echo "Waiting for API to be ready..."
          timeout 60 bash -c 'until kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/health > /dev/null; do echo "Waiting for API..."; sleep 5; done'

          # Test 1: Health check endpoint
          echo "Testing health check endpoint..."
          HEALTH_RESPONSE=$(kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/health)
          echo "Health response: $HEALTH_RESPONSE"
          if echo "$HEALTH_RESPONSE" | grep -q "ok\|healthy\|status"; then
            echo "✓ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

          # Test 2: Models endpoint
          echo "Testing models endpoint..."
          MODELS_RESPONSE=$(kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/v1/models)
          echo "Models response: $MODELS_RESPONSE"
          if echo "$MODELS_RESPONSE" | grep -q "MoM\|object.*list"; then
            echo "✓ Models endpoint passed"
          else
            echo "❌ Models endpoint failed"
            exit 1
          fi

          # Test 3: Intent classification
          echo "Testing intent classification..."
          INTENT_RESPONSE=$(kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s -X POST http://localhost:8080/api/v1/classify/intent \
            -H "Content-Type: application/json" \
            -d '{"text": "What is machine learning?"}')
          echo "Intent response: $INTENT_RESPONSE"
          if echo "$INTENT_RESPONSE" | grep -q "category\|confidence\|score"; then
            echo "✓ Intent classification passed"
          else
            echo "❌ Intent classification failed"
            exit 1
          fi

          echo "✅ All API functionality tests passed!"

      - name: Check logs
        if: always()
        run: |
          echo "=== Deployment Logs ==="
          kubectl logs -n vllm-semantic-router-system -l app=semantic-router --tail=200 --all-containers=true || true

          echo "=== Events ==="
          kubectl get events -n vllm-semantic-router-system --sort-by='.lastTimestamp' || true

      - name: Export cluster logs on failure
        if: failure()
        run: |
          echo "=== Exporting cluster information for debugging ==="
          mkdir -p /tmp/k8s-logs

          # Export kind cluster logs
          echo "=== Kind cluster logs ==="
          docker logs semantic-router-cluster-control-plane > /tmp/k8s-logs/kind-control-plane.log || true

          # Export pod descriptions
          kubectl describe pods -n vllm-semantic-router-system > /tmp/k8s-logs/pod-descriptions.txt || true

          # Export deployment description
          kubectl describe deployment -n vllm-semantic-router-system > /tmp/k8s-logs/deployment-description.txt || true

          # Export all logs
          kubectl logs -n vllm-semantic-router-system -l app=semantic-router --all-containers=true --previous > /tmp/k8s-logs/previous-logs.txt || true
          kubectl logs -n vllm-semantic-router-system -l app=semantic-router --all-containers=true > /tmp/k8s-logs/current-logs.txt || true

          # Export events
          kubectl get events -n vllm-semantic-router-system --sort-by='.lastTimestamp' > /tmp/k8s-logs/events.txt || true

          # Export resource status
          kubectl get all -n vllm-semantic-router-system -o yaml > /tmp/k8s-logs/all-resources.yaml || true

          # Export kind cluster info
          kind get kubeconfig --name semantic-router-cluster > /tmp/k8s-logs/kind-kubeconfig.yaml || true

      - name: Upload cluster logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: k8s-cluster-logs
          path: /tmp/k8s-logs/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up resources..."
          kubectl delete namespace vllm-semantic-router-system --timeout=60s || true
          echo "Cleaning up kind cluster..."
          kind delete cluster --name semantic-router-cluster || true
          echo "Restoring original kustomization..."
          cd deploy/kubernetes
          if [ -f kustomization.yaml.backup ]; then
            mv kustomization.yaml.backup kustomization.yaml
          fi
