name: API Functionality Test

on:
  workflow_call:
    inputs:
      kind_version:
        description: "Kind version to use"
        required: false
        type: string
        default: "v0.20.0"
      kustomize_version:
        description: "Kustomize version to use"
        required: false
        type: string
        default: "v5.7.1"

jobs:
  test-api-functionality:
    name: Test API Functionality
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Create kind cluster for API testing
        uses: helm/kind-action@v1.8.0
        with:
          version: ${{ inputs.kind_version }}
          config: |
            kind: Cluster
            apiVersion: kind.x-k8s.io/v1alpha4
            name: api-test-cluster
            nodes:
              - role: control-plane
                extraPortMappings:
                  - containerPort: 30080
                    hostPort: 30080
                    protocol: TCP
                kubeadmConfigPatches:
                  - |
                    kind: InitConfiguration
                    nodeRegistration:
                      kubeletExtraArgs:
                        system-reserved: memory=512Mi,cpu=250m
                        kube-reserved: memory=512Mi,cpu=250m
                        eviction-hard: memory.available<512Mi,nodefs.available<10%
          cluster_name: api-test-cluster
          wait: 120s

      - name: Build and load image
        run: |
          # Build image
          docker build -f ./Dockerfile.extproc -t ghcr.io/vllm-project/semantic-router/extproc:api-test .

          # Load into kind
          kind load docker-image ghcr.io/vllm-project/semantic-router/extproc:api-test --name api-test-cluster

      - name: Install Kustomize
        run: |
          echo "Installing Kustomize ${{ inputs.kustomize_version }}..."
          # Use the official installation script for better reliability
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          kustomize version

      - name: Prepare API test deployment
        run: |
          echo "Preparing API test deployment configuration..."

          # Create a temporary kustomization file for API testing
          cd deploy/kubernetes

          # Backup original kustomization.yaml
          cp kustomization.yaml kustomization.yaml.backup

          # Create API test-specific kustomization with patches
          cat > kustomization.yaml << EOF
          apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization

          metadata:
            name: semantic-router

          resources:
          - namespace.yaml
          - pv-models.yaml
          - deployment.yaml
          - service.yaml

          # Generate ConfigMap
          configMapGenerator:
          - name: semantic-router-config
            files:
            - config.yaml
            - tools_db.json

          namespace: vllm-semantic-router-system

          images:
          - name: ghcr.io/vllm-project/semantic-router/extproc
            newTag: api-test

          patches:
          - patch: |-
              - op: replace
                path: /spec/template/spec/containers/0/resources/requests/memory
                value: "512Mi"
              - op: replace
                path: /spec/template/spec/containers/0/resources/requests/cpu
                value: "250m"
              - op: replace
                path: /spec/template/spec/containers/0/resources/limits/memory
                value: "1Gi"
              - op: replace
                path: /spec/template/spec/containers/0/resources/limits/cpu
                value: "500m"
              - op: add
                path: /spec/template/spec/containers/0/imagePullPolicy
                value: "IfNotPresent"
            target:
              kind: Deployment
              name: semantic-router
          EOF

          echo "=== Generated API test kustomization ==="
          cat kustomization.yaml

      - name: Deploy for API testing
        run: |
          kustomize build deploy/kubernetes | kubectl apply -f -

          # Wait for deployment
          kubectl wait --for=jsonpath='{.status.phase}'=Active namespace/vllm-semantic-router-system --timeout=60s
          kubectl wait --for=jsonpath='{.status.phase}'=Bound pvc/semantic-router-models -n vllm-semantic-router-system --timeout=120s
          kubectl wait --for=condition=Initialized pods -l app=semantic-router -n vllm-semantic-router-system --timeout=600s
          kubectl wait --for=condition=Ready pods -l app=semantic-router -n vllm-semantic-router-system --timeout=300s

      - name: Run comprehensive API tests
        run: |
          echo "=== Running Comprehensive API Tests ==="

          POD_NAME=$(kubectl get pods -n vllm-semantic-router-system -l app=semantic-router -o jsonpath='{.items[0].metadata.name}')
          echo "Pod name: $POD_NAME"

          # Wait for API to be ready
          echo "Waiting for API to be ready..."
          timeout 120 bash -c 'until kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/health > /dev/null 2>&1; do echo "Waiting for API..."; sleep 10; done'

          # Test results tracking
          TESTS_PASSED=0
          TESTS_FAILED=0
          TOTAL_TESTS=0

          # Function to run a test
          run_test() {
            local test_name="$1"
            local test_command="$2"
            local expected_pattern="$3"
            
            echo ""
            echo "üß™ Testing: $test_name"
            echo "Command: $test_command"
            
            TOTAL_TESTS=$((TOTAL_TESTS + 1))
            
            if eval "$test_command" | grep -q "$expected_pattern"; then
              echo "‚úÖ $test_name PASSED"
              TESTS_PASSED=$((TESTS_PASSED + 1))
            else
              echo "‚ùå $test_name FAILED"
              TESTS_FAILED=$((TESTS_FAILED + 1))
              echo "Response:"
              eval "$test_command" || true
            fi
          }

          # Test 1: Health check
          run_test "Health Check" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/health" \
            "ok\|healthy\|status"

          # Test 2: Models endpoint
          run_test "Models Endpoint" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/v1/models" \
            "MoM\|object.*list"

          # Test 3: Intent classification
          run_test "Intent Classification" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s -X POST http://localhost:8080/api/v1/classify/intent -H 'Content-Type: application/json' -d '{\"text\": \"What is machine learning?\"}'" \
            "category\|confidence\|score"

          # Test 4: PII detection
          run_test "PII Detection" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s -X POST http://localhost:8080/api/v1/classify/pii -H 'Content-Type: application/json' -d '{\"text\": \"My email is john.doe@example.com\"}'" \
            "pii\|detected\|confidence"

          # Test 5: Security detection
          run_test "Security Detection" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s -X POST http://localhost:8080/api/v1/classify/security -H 'Content-Type: application/json' -d '{\"text\": \"This is a normal question about programming\"}'" \
            "jailbreak\|security\|confidence"

          # Test 6: Batch classification
          run_test "Batch Classification" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s -X POST http://localhost:8080/api/v1/classify/batch -H 'Content-Type: application/json' -d '{\"texts\": [\"What is AI?\", \"My phone is 123-456-7890\"], \"task_type\": \"intent\"}'" \
            "results\|classifications"

          # Test 7: Models info
          run_test "Models Info" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/info/models" \
            "models\|loaded\|status"

          # Test 8: Classifier info
          run_test "Classifier Info" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/info/classifier" \
            "classifier\|config\|status"

          # Test 9: API overview
          run_test "API Overview" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/api/v1" \
            "endpoints\|api\|version"

          # Test 10: Metrics
          run_test "Metrics Endpoint" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/metrics/classification" \
            "metrics\|classification\|prometheus"

          # Test 11: Error handling - invalid JSON
          run_test "Error Handling - Invalid JSON" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s -X POST http://localhost:8080/api/v1/classify/intent -H 'Content-Type: application/json' -d 'invalid json' | grep -q 'error\|invalid\|bad'" \
            "error\|invalid\|bad"

          # Test 12: Error handling - missing required fields
          run_test "Error Handling - Missing Fields" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s -X POST http://localhost:8080/api/v1/classify/intent -H 'Content-Type: application/json' -d '{}' | grep -q 'error\|missing\|required'" \
            "error\|missing\|required"

          # Test 13: Performance test - multiple requests
          echo ""
          echo "üöÄ Performance Test: Multiple concurrent requests"
          for i in {1..5}; do
            kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s -X POST http://localhost:8080/api/v1/classify/intent \
              -H 'Content-Type: application/json' \
              -d "{\"text\": \"Test question $i about technology\"}" > /dev/null &
          done
          wait
          echo "‚úÖ Performance test completed"

          # Test 14: Different text categories
          echo ""
          echo "üìö Testing different text categories"

          # Math question
          run_test "Math Category" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s -X POST http://localhost:8080/api/v1/classify/intent -H 'Content-Type: application/json' -d '{\"text\": \"What is the derivative of x^2?\"}'" \
            "category\|confidence"

          # Business question  
          run_test "Business Category" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s -X POST http://localhost:8080/api/v1/classify/intent -H 'Content-Type: application/json' -d '{\"text\": \"How can I improve my company's revenue?\"}'" \
            "category\|confidence"

          # Health question
          run_test "Health Category" \
            "kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s -X POST http://localhost:8080/api/v1/classify/intent -H 'Content-Type: application/json' -d '{\"text\": \"What are the symptoms of a cold?\"}'" \
            "category\|confidence"

          # Print test summary
          echo ""
          echo "=== API Test Summary ==="
          echo "Total Tests: $TOTAL_TESTS"
          echo "Passed: $TESTS_PASSED"
          echo "Failed: $TESTS_FAILED"
          echo "Success Rate: $(( (TESTS_PASSED * 100) / TOTAL_TESTS ))%"

          if [ $TESTS_FAILED -gt 0 ]; then
            echo ""
            echo "‚ùå Some API tests failed. Check the logs above for details."
            exit 1
          else
            echo ""
            echo "‚úÖ All API tests passed!"
          fi

      - name: Export API test logs on failure
        if: failure()
        run: |
          echo "=== Exporting API test logs for debugging ==="
          mkdir -p /tmp/api-test-logs

          POD_NAME=$(kubectl get pods -n vllm-semantic-router-system -l app=semantic-router -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "pod-not-found")

          # Export pod logs
          kubectl logs -n vllm-semantic-router-system $POD_NAME --all-containers=true > /tmp/api-test-logs/pod-logs.txt 2>/dev/null || true

          # Export pod description
          kubectl describe pods -n vllm-semantic-router-system > /tmp/api-test-logs/pod-description.txt 2>/dev/null || true

          # Export events
          kubectl get events -n vllm-semantic-router-system --sort-by='.lastTimestamp' > /tmp/api-test-logs/events.txt 2>/dev/null || true

          # Test API responses for debugging
          kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/health > /tmp/api-test-logs/health-response.txt 2>/dev/null || true
          kubectl exec -n vllm-semantic-router-system $POD_NAME -- curl -s http://localhost:8080/v1/models > /tmp/api-test-logs/models-response.txt 2>/dev/null || true

      - name: Upload API test logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-logs
          path: /tmp/api-test-logs/
          retention-days: 7

      - name: Cleanup API test
        if: always()
        run: |
          echo "Cleaning up API test resources..."
          kubectl delete namespace vllm-semantic-router-system --timeout=60s || true
          kind delete cluster --name api-test-cluster || true
          echo "Restoring original kustomization..."
          cd deploy/kubernetes
          if [ -f kustomization.yaml.backup ]; then
            mv kustomization.yaml.backup kustomization.yaml
          fi
